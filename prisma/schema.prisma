// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  code         String       @id
  name         String
  currency     String?
  region       String
  Currency     Currency?     @relation(fields: [currency], references: [code])
  Event        Event[]
  Exchange     Exchange[]
  Instrument   Instrument[]
}

model Currency {
  code        String    @id
  name        String
  countryCode String
  issuer      String?
  Country     Country[]
}

model Event {
  name        String
  date        DateTime
  duration    Int?       @default(60)
  website     String?
  coordinator String?
  category    String?
  isOnline    Boolean?
  countryCode String?
  location    String?
  venue       String?
  instrument  String
  Country     Country?   @relation(fields: [countryCode], references: [code])
  Instrument  Instrument @relation(fields: [instrument], references: [isin], onDelete: Cascade, onUpdate: Cascade)

  @@id([name, instrument, date])
}

model Exchange {
  mic              String       @id
  name             String
  acronym          String?
  yahooIdentifier  String?
  googleIdentifier String?
  countryCode      String
  city             String
  website          String?
  Country          Country      @relation(fields: [countryCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  Instrument       Instrument[]
  Listing          Listing[]
}

model Gics {
  code              Int               @id
  name              String
  description       String
  industryCode      Int
  industrygroupCode Int
  sectorCode        Int
  GicsSector        GicsSector        @relation(fields: [sectorCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  GicsIndustry      GicsIndustry      @relation(fields: [industryCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  GicsIndustryGroup GicsIndustryGroup @relation(fields: [industrygroupCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  GicsToIcb         GicsToIcb[]
  Instrument        Instrument[]
}

model GicsSector {
  code              Int                 @id
  name              String
  Gics              Gics[]
  GicsIndustryGroup GicsIndustryGroup[]
}

model GicsIndustry {
  code              Int               @id
  name              String
  industrygroupCode Int
  Gics              Gics[]
  GicsIndustryGroup GicsIndustryGroup @relation(fields: [industrygroupCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
}

model GicsIndustryGroup {
  code         Int            @id
  name         String
  sectorCode   Int
  Gics         Gics[]
  GicsIndustry GicsIndustry[]
  GicsSector   GicsSector     @relation(fields: [sectorCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
}

model Icb {
  code            Int            @id
  name            String
  description     String
  sectorCode      Int
  supersectorCode Int
  industryCode    Int
  GicsToIcb       GicsToIcb[]
  IcbSector       IcbSector      @relation(fields: [sectorCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  IcbSupersector  IcbSupersector @relation(fields: [supersectorCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  IcbIndustry     IcbIndustry    @relation(fields: [industryCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  Instrument      Instrument[]
}

model IcbIndustry {
  code Int    @id
  name String
  Icb  Icb[]
}

model IcbSector {
  code Int    @id
  name String
  Icb  Icb[]
}

model IcbSupersector {
  code Int    @id
  name String
  Icb  Icb[]
}

model GicsToIcb {
  gicsCode      Int
  icbCode       Int
  yahooIndustry String?
  Icb           Icb     @relation(fields: [icbCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  Gics          Gics    @relation(fields: [gicsCode], references: [code], onDelete: Cascade, onUpdate: Cascade)

  @@id([gicsCode, icbCode])
}

model Listing {
  ticker       String
  exchange     String
  instrument   String
  yahooTicker  String
  googleTicker String
  Exchange     Exchange   @relation(fields: [exchange], references: [mic], onDelete: Cascade, onUpdate: Cascade)
  Instrument   Instrument @relation(fields: [instrument], references: [isin], onDelete: Cascade, onUpdate: Cascade)

  @@id([ticker, exchange, instrument])
  @@unique([ticker, exchange])
}

model User {
  firstname String?
  lastname  String?
  email     String      @id
  password  String
  role      String      @default("user")
  status    String      @default("disabled")
  githubId  Int?
  googleId  String?
  Portfolio Portfolio[]
  Session   Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [email], onDelete: Cascade, onUpdate: Cascade)
}

model Portfolio {
  ticker                String
  name                  String
  custodian             String                  @default("self")
  type                  String                  @default("portfolio")
  assetclass            String                  @default("equity")
  visibility            String                  @default("private")
  weighting             String                  @default("marketcap")
  user                  String
  User                  User                    @relation(fields: [user], references: [email], onDelete: Cascade, onUpdate: Cascade)
  PortfolioToInstrument PortfolioToInstrument[]

  @@id([user, ticker])
}

model Instrument {
  isin                  String                  @id
  ticker                String
  name                  String
  exchangeId            String
  gicsCode              Int?
  icbCode               Int?
  countryCode           String
  assetclass            String                  @default("equity")
  website               String?
  ter                   Float?
  sharesOut             Float?
  Event                 Event[]
  Country               Country                 @relation(fields: [countryCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  Icb                   Icb?                    @relation(fields: [icbCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  Gics                  Gics?                   @relation(fields: [gicsCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  Exchange              Exchange                @relation(fields: [exchangeId], references: [mic], onDelete: Cascade, onUpdate: Cascade)
  Listing               Listing[]
  PortfolioToInstrument PortfolioToInstrument[]
  ArticleToInstrument   ArticleToInstrument[]

  @@unique([ticker, exchangeId])
}

model PortfolioToInstrument {
  ticker       String
  user         String
  instrumentId String
  weight       Float?
  shares       Float?
  Portfolio    Portfolio  @relation(fields: [user, ticker], references: [user, ticker], onDelete: Cascade, onUpdate: Cascade)
  Instrument   Instrument @relation(fields: [instrumentId], references: [isin], onDelete: Cascade, onUpdate: Cascade)

  @@id([ticker, user, instrumentId])
}

model Article {
  author              String?
  source              String?
  published           DateTime?
  url                 String                @id()
  title               String
  description         String
  image               String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  ArticleToInstrument ArticleToInstrument[]
}

model ArticleToInstrument {
  article    String
  ticker     String
  exchange   String
  Article    Article    @relation(fields: [article], references: [url], onDelete: Cascade, onUpdate: Cascade)
  Instrument Instrument @relation(fields: [ticker, exchange], references: [ticker, exchangeId], onDelete: Cascade, onUpdate: Cascade)

  @@id([ticker, exchange, article])
}
