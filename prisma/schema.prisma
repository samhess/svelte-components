generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Company {
  key         String       @id
  name        String
  gics        Int?
  headquarter String?
  domicile    String?
  website     String?
  Gics        Gics?        @relation(fields: [gics], references: [code], onDelete: Cascade)
  Domicile    Country?     @relation("domicile", fields: [domicile], references: [code], onDelete: Cascade)
  Headquarter Country?     @relation("headquarter", fields: [headquarter], references: [code], onDelete: Cascade)
  Instrument  Instrument[]
}

model Country {
  code        String       @id
  name        String
  currency    String
  region      String
  Domicile    Company[]    @relation("domicile")
  Headquarter Company[]    @relation("headquarter")
  Currency    Currency     @relation(fields: [currency], references: [code])
  Exchange    Exchange[]
  Instrument  Instrument[]
}

model Currency {
  code    String    @id
  name    String
  country String
  issuer  String?
  Country Country[]
}

model Exchange {
  mic              String       @id
  name             String
  acronym          String?
  yahooIdentifier  String?
  googleIdentifier String?
  country          String
  city             String
  website          String?
  timezone         String?
  Country          Country      @relation(fields: [country], references: [code], onDelete: Cascade)
  Instrument       Instrument[]
}

model Gics {
  code          Int               @id @default(autoincrement())
  name          String
  description   String
  industry      Int
  key           String            @unique
  industryGroup Int
  sector        Int
  Company       Company[]
  Sector        GicsSector        @relation(fields: [sector], references: [code], onDelete: Cascade)
  Industry      GicsIndustry      @relation(fields: [industry], references: [code], onDelete: Cascade)
  IndustryGroup GicsIndustryGroup @relation(fields: [industryGroup], references: [code], onDelete: Cascade)
}

model GicsIndustry {
  code Int    @id @default(autoincrement())
  name String
  Gics Gics[]
}

model GicsIndustryGroup {
  code Int    @id @default(autoincrement())
  name String
  Gics Gics[]
}

model GicsSector {
  code Int    @id @default(autoincrement())
  name String
  Gics Gics[]
}

model Instrument {
  isin       String   @id
  company    String?
  ticker     String
  name       String
  exchange   String
  country    String
  type       String?
  assetclass String?
  website    String?
  ter        Float?
  sharesOut  Float?
  price      Float?
  umbrella   String?
  Exchange   Exchange @relation(fields: [exchange], references: [mic], onDelete: Cascade)
  Company    Company? @relation(fields: [company], references: [key], onDelete: Cascade)
  Country    Country  @relation(fields: [country], references: [code], onDelete: Cascade)

  @@unique([ticker, exchange])
}

model Session {
  id        String   @id
  user      String
  expiresAt DateTime
  User      User     @relation(fields: [user], references: [email], onDelete: Cascade)
}

model User {
  firstname String?
  lastname  String?
  email     String    @id
  password  String?
  role      String    @default("user")
  status    String    @default("enabled")
  Session   Session[]
}
